{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "https://dev-idp.authlete.net",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "token-endpoint"
        ],
        "operationId": "tokenEndpoint",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MultiValueMapStringString"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session/mfa": {
      "post": {
        "tags": [
          "session-api"
        ],
        "summary": "Second step endpoint for MFA login. After a user has successfully received a MFA token from the session/login\nendpoint, they need to provide it here along with a totp or webauthn authentication.",
        "operationId": "mfa",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponse"
                }
              }
            }
          }
        }
      }
    },
    "/session/login": {
      "post": {
        "tags": [
          "session-api"
        ],
        "summary": "Login with a password. If the user has MFA authentication methods enabled, the response will include a\n            MFA token to use in the /session/mfa endpoint.",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogInRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponse"
                }
              }
            }
          }
        }
      }
    },
    "/introspect": {
      "post": {
        "tags": [
          "introspection-endpoint"
        ],
        "operationId": "introspect",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MultiValueMapStringString"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "user-api"
        ],
        "summary": "Admin level function to retrieve list of all users.",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateUserResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "Create a new a new user after verifying the email address.\nAdmin users can create new users without the email verification step.\nFor non-admin requests, the user will be logged in on successful creation.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "Update own given name, surname, and/or preferred 2fa method.\nAdmin users can update also other users, including their email address.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-api"
        ],
        "summary": "Admin level function to delete a single user, except themselves.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/{id}/webauthn": {
      "get": {
        "tags": [
          "user-api"
        ],
        "operationId": "createWebAuthnChallenge",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-api"
        ],
        "operationId": "bindWebAuthnChallenge",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebAuthnChallengeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationMethodResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}/totp": {
      "get": {
        "tags": [
          "user-api"
        ],
        "operationId": "createTotpCredentials",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleAuthenticatorKey"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-api"
        ],
        "operationId": "bindTotpCredentials",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindTotpCredentialsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationMethodResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}/password": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "Update own password. Admin users can update also other users passwords\nwithout providing the existing password.",
        "operationId": "updatePassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}/auth/{authId}": {
      "post": {
        "tags": [
          "user-api"
        ],
        "operationId": "renameAuthenticator",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "authId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameAuthenticatorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationMethodResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-api"
        ],
        "summary": "Remove a single authenticator from yourself.\nAdmins can remove authenticators also from other users.",
        "operationId": "removeAuthenticator",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "authId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/{id}/admin": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "Admin level function to make another user an admin.",
        "operationId": "setAdmin",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-api"
        ],
        "summary": "Admin level function to make another admin normal user.",
        "operationId": "unsetAdmin",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/verify": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "Verify registered email, either by using using short code + email address,\nor just long code provided in the verification email.",
        "operationId": "verifyEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmailVerificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/register": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "Register a new user and get a verification email.\nIf the user already exists but their email is unverified, a new email will be sent.",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/password": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "    Reset own password using a password reset token from a password reset email.\n",
        "operationId": "resetOwnPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetTokenCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/password/reset": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "    Request password reset email.\n",
        "operationId": "requestPasswordResetEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPasswordResetEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/password/reset/check": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "    Check the validity of a password reset token.\n",
        "operationId": "checkPasswordResetTokenValidity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetTokenCheckRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetTokenCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/password/check-common": {
      "post": {
        "tags": [
          "user-api"
        ],
        "summary": "Check if a password is common",
        "operationId": "checkCommonPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordCheckRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/servicetoken/update": {
      "post": {
        "tags": [
          "service-token-api"
        ],
        "summary": "Rename a new service token.\nA MODIFY_SERVICE role is required.",
        "operationId": "renameServiceToken",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameServiceTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/servicetoken/rotate": {
      "post": {
        "tags": [
          "service-token-api"
        ],
        "summary": "Rotate a service token.\nA MODIFY_SERVICE role is required.",
        "operationId": "rotateServiceToken",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RotateServiceTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/servicetoken/revoke": {
      "post": {
        "tags": [
          "service-token-api"
        ],
        "summary": "Revoke a service token.\nA MODIFY_SERVICE role is required.",
        "operationId": "revokeServiceToken",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteServiceTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/servicetoken/create": {
      "post": {
        "tags": [
          "service-token-api"
        ],
        "summary": "Create a new service token.\nA MODIFY_SERVICE role is required.",
        "operationId": "createTokenForService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/servicetoken/all": {
      "post": {
        "tags": [
          "service-token-api"
        ],
        "summary": "Retrieve a list of service tokens.\nA VIEW_SERVICE role is required.",
        "operationId": "getTokensForService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetServiceTokensRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceTokenResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/service": {
      "post": {
        "tags": [
          "service-api"
        ],
        "summary": "Create a new service on the api server,\nbelonging to the specified organization.\nA service can be created either with an organization token,\nor by an user with a CREATE_SERVICE role.",
        "operationId": "createService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/remove": {
      "post": {
        "tags": [
          "service-api"
        ],
        "summary": "Delete a service from the api server.\nA service can be deleted either with an organization token,\nor by an user with a MODIFY_SERVICE role.",
        "operationId": "deleteService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/orphans/remove": {
      "post": {
        "tags": [
          "service-api"
        ],
        "summary": "Admin level function to remove an orphaned service that is not on an api server.\nAny service tokens belonging to that service are also deleted and revoked.\nNote that this function does NOT check if the service is actually an orphan or not.",
        "operationId": "removeOrphanService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveOrphanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/organization": {
      "post": {
        "tags": [
          "service-api"
        ],
        "summary": "Admin level function to get a organization ids based on service ids.",
        "operationId": "getOrganizationIdsForServices",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetServicesOrganizationIdsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServicesOrganizationIdsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/move": {
      "post": {
        "tags": [
          "service-api"
        ],
        "summary": "Admin level function to move a service from one organization to another.",
        "operationId": "moveService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInstanceManagementResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/adopt": {
      "post": {
        "tags": [
          "service-api"
        ],
        "summary": "Admin level function to adopt an orphaned service\nto the specified api server.",
        "operationId": "adoptService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdoptServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInstanceManagementResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizationtoken/update": {
      "post": {
        "tags": [
          "organization-token-api"
        ],
        "summary": "Organization admin level function to rename an organization token.",
        "operationId": "renameTokenForService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameOrganizationTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizationtoken/rotate": {
      "post": {
        "tags": [
          "organization-token-api"
        ],
        "summary": "Organization admin level function to to rotate an organization token.",
        "operationId": "rotateTokenForOrganization",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RotateOrganizationTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizationtoken/revoke": {
      "post": {
        "tags": [
          "organization-token-api"
        ],
        "summary": "Organization admin level function to delete an organization token.",
        "operationId": "deleteOrganizationToken",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrganizationTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/organizationtoken/create": {
      "post": {
        "tags": [
          "organization-token-api"
        ],
        "summary": "Organization admin level function to create an organization token.",
        "operationId": "createTokenForOrganization",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizationtoken/all": {
      "post": {
        "tags": [
          "organization-token-api"
        ],
        "summary": "Organization admin level function to retrieve a list of organization tokens.",
        "operationId": "getTokensForOrganization",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOrganizationTokensRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationTokenResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization": {
      "get": {
        "tags": [
          "organization-api"
        ],
        "summary": "Admin level api to retrieve a list of all organizations.\nMembers of the organizations are not included.",
        "operationId": "getAllOrganizations",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization-api"
        ],
        "summary": "Create a new organization.\nOnly admin users can create organization with non-free plans.",
        "operationId": "createOrganization",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{id}": {
      "get": {
        "tags": [
          "organization-api"
        ],
        "summary": "Retrieve a single organization.\nFor users with MANAGE_USERS role in the organization,\nmembers of the organization will be included.",
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization-api"
        ],
        "summary": "Organization admin level function to update organization name.\nSite admin can also update the organization's plan.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organization-api"
        ],
        "summary": "Organization admin level function to delete an organization.\nThis will also delete all service instances, service access tokens\nand organization access tokens associated with the organization.\nThe tokens are also revoked.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/oidcconfig": {
      "get": {
        "tags": [
          "oidc-federation-configuration-api"
        ],
        "operationId": "getAllOIDCConfigs",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OIDCFederationConfigurationResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "oidc-federation-configuration-api"
        ],
        "operationId": "createOIDCConfig",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOIDCFederationConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OIDCFederationConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/oidcconfig/{id}": {
      "get": {
        "tags": [
          "oidc-federation-configuration-api"
        ],
        "operationId": "getOIDCConfig",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OIDCFederationConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "oidc-federation-configuration-api"
        ],
        "operationId": "updateOIDCConfig",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOIDCFederationConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OIDCFederationConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "oidc-federation-configuration-api"
        ],
        "operationId": "deleteOIDCConfig",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/oidc/start": {
      "post": {
        "tags": [
          "oidc-client-api"
        ],
        "operationId": "startLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCFederationStartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OIDCFederationStartResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/oidc/consent": {
      "post": {
        "tags": [
          "oidc-client-api"
        ],
        "operationId": "oidcConsent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentApprovalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/oidc/callback": {
      "post": {
        "tags": [
          "oidc-client-api"
        ],
        "operationId": "oidcCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCCallbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/feedback": {
      "post": {
        "tags": [
          "feedback-api"
        ],
        "summary": "Post feedback regarding Authlete 3.",
        "operationId": "postFeedback",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostFeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/email/provider/test-config": {
      "post": {
        "tags": [
          "email-provider-api"
        ],
        "summary": "Test email provider configuration",
        "description": "Sends a test email to the currently logged-in user's email address to verify that the email provider settings are valid. The email language is determined from the request locale, defaulting to English if not specified.",
        "operationId": "testConfig",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/email/provider/smtp": {
      "get": {
        "tags": [
          "smtp-config-api"
        ],
        "summary": "Retrieve the current SMTP configuration",
        "description": "Returns the stored SMTP configuration if it exists, otherwise 404 if not found.",
        "operationId": "getSmtpConfig",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpConfigResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "smtp-config-api"
        ],
        "summary": "Create or update SMTP configuration",
        "description": "Upserts the SMTP configuration and invalidates the cache to ensure future retrievals show the latest data.",
        "operationId": "upsertSmtpConfig",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmtpConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpConfigResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "smtp-config-api"
        ],
        "summary": "Delete SMTP configuration",
        "description": "Delete the saved SMTP configuration.",
        "operationId": "deleteSmtpConfig",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/config": {
      "get": {
        "tags": [
          "dynamic-config-api"
        ],
        "summary": "Authlete admin level function to get environment configuration",
        "operationId": "getEnvironmentConfiguration",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicConfigRequestResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dynamic-config-api"
        ],
        "summary": "Authlete admin level function to update environment configuration",
        "operationId": "setEnvironmentConfiguration",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicConfigRequestResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicConfigRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/authorize/submit": {
      "post": {
        "tags": [
          "authorize-api"
        ],
        "operationId": "submitUserDecision",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/authorize/start": {
      "post": {
        "tags": [
          "authorize-api"
        ],
        "operationId": "authorizationEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apiserver": {
      "get": {
        "tags": [
          "api-server-api"
        ],
        "summary": "Get a list of all api servers available to you.\nApi servers associated with organizations that you are not a part of are not returned.\nFor admin users, all api servers are returned.",
        "operationId": "getAllApiServers",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateApiServerResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "api-server-api"
        ],
        "summary": "Admin level function to create a new api server.",
        "operationId": "createApiServer",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateApiServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apiserver/{id}": {
      "get": {
        "tags": [
          "api-server-api"
        ],
        "summary": "Retrieve a single api server, even if you don't belong to it.",
        "operationId": "getApiServer",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateApiServerResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "api-server-api"
        ],
        "summary": "Admin level function to update an api server.",
        "operationId": "updateApiServer",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateApiServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "api-server-api"
        ],
        "summary": "Admin level function to delete an api server.",
        "operationId": "deleteApiServer",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/allowlist": {
      "get": {
        "tags": [
          "authlete-application-api"
        ],
        "summary": "Admin level function to retrieve a list of all Authlete applications.",
        "operationId": "getAllAuthleteApplications",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateAuthleteApplicationResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "authlete-application-api"
        ],
        "summary": "Admin level function to create a new allowlisted Authlete application.",
        "operationId": "createAuthleteApp",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthleteApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAuthleteApplicationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/allowlist/{id}": {
      "post": {
        "tags": [
          "authlete-application-api"
        ],
        "summary": "Admin level function to update an Authlete application.",
        "operationId": "updateAuthleteApp",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAuthleteApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAuthleteApplicationResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "authlete-application-api"
        ],
        "summary": "Admin level function to delete an Authlete application.",
        "operationId": "deleteAuthleteApp",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/access/service": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Update service privileges for the specified user.\nMANAGE_USERS role is required.\nOnly site admins can give the api server admin role.\nOnly admins can target themselves.\nThe user needs to belong to the specified organization.",
        "operationId": "updateServicePrivileges",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServicePrivilegesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/access/service/remove": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Remove service privileges from the specified user.\nMANAGE_USERS role is required.\nOnly site admins can give the api server admin role.\nOnly admins can target themselves.\nThe user needs to belong to the specified organization.",
        "operationId": "removeServicePrivileges",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveServicePrivilegesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/access/organization": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Update organization privileges for the specified user.\nMANAGE_USERS role is required.\nOnly admins and organization admins can give the organization admin role.\nOnly admins can target themselves.\nThe user needs to belong to the specified organization.",
        "operationId": "updateOrganizationPrivileges",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationPrivilegesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/access/organization/remove": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Remove organization privileges from the specified user.\nMANAGE_USERS role is required.\nIf targeting themselves, there needs to be at least one other user\nleft with with MANAGE_USERS role. This does not apply to site admins\nmaking the request.",
        "operationId": "removeOrganizationPrivileges",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveOrganizationPrivilegesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/access/invite": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Invite a user to an organization. MANAGE_USERS role is required.\nIf the user already exists, an email indicating they were invited will be sent.\nFor new non-federated users, the email will also include verification codes\nfor them to verify their email.\nNew federated users will only get an notification email.",
        "operationId": "createInvitationByEmail",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvitationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/access/invite/{id}": {
      "get": {
        "tags": [
          "access-api"
        ],
        "summary": "Retrieve a specific invitation.\nYou need to be either the inviter, or the invitee.",
        "operationId": "getInvitation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Accept an invitation that you have received.\nPrivileges specified in the invite will be added to your user.",
        "operationId": "acceptInvitation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "access-api"
        ],
        "summary": "Decline an invitation that you have received.\n",
        "operationId": "declineInvitation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/access/client": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Update client privileges for the specified user.\nMANAGE_USERS role is required. Only admins can update themselves.\nThe user needs to belong to the specified organization.",
        "operationId": "updateClientPrivileges",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientPrivilegesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientAccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/access/client/remove": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Remove client privileges from the specified user.\nMANAGE_USERS role is required. Only admins can target themselves.\nThe user needs to belong to the specified organization.",
        "operationId": "removeClientPrivileges",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveClientPrivilegesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/access/apiserver": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Update api server privileges for the specified user.\nMANAGE_USERS role is required.\nOnly site admins can give the api server admin role.\nOnly admins can target themselves.\nThe user needs to belong to the specified organization.",
        "operationId": "updateApiServerPrivileges",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiServerPrivilegesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServerAccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/access/apiserver/remove": {
      "post": {
        "tags": [
          "access-api"
        ],
        "summary": "Remove api server privileges from the specified user.\nMANAGE_USERS role is required.\nOnly site admins can target themselves.\nThe user needs to belong to the specified organization.",
        "operationId": "removeApiServerPrivileges",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveApiServerPrivilegesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/userinfo": {
      "get": {
        "tags": [
          "user-info-endpoint"
        ],
        "operationId": "userInfo",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session/{email}": {
      "get": {
        "tags": [
          "session-api"
        ],
        "summary": "Check if the user associated with the given email has an active session,\nor if they need to login.",
        "operationId": "accountCheck",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponse"
                }
              }
            }
          }
        }
      }
    },
    "/session/current": {
      "get": {
        "tags": [
          "session-api"
        ],
        "summary": "Retrieve the currently logged in user.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponse"
                }
              }
            }
          }
        }
      }
    },
    "/jwks": {
      "get": {
        "tags": [
          "json-web-key-set-endpoint"
        ],
        "operationId": "getJsonWebKeySet",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}/auth": {
      "get": {
        "tags": [
          "user-api"
        ],
        "summary": "Returns all authenticators associated with yourself.\nAdmins can retrieve authenticators also for other users.",
        "operationId": "getAllAuthenticators",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationMethodResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/service/orphans": {
      "get": {
        "tags": [
          "service-api"
        ],
        "summary": "Admin level function to retrieve a orphaned service.\nAn orphan service is a service that is on the api server\nbut not on the IdP, or vice versa.",
        "operationId": "getOrphans",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrphanServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/find/{id}": {
      "get": {
        "tags": [
          "service-api"
        ],
        "summary": "Admin level function to retrieve a list of service instances\nof the specified api server.",
        "operationId": "findServices",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceInstanceManagementResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{id}/stats": {
      "get": {
        "tags": [
          "organization-api"
        ],
        "summary": "Get the usage statistics for this organization, across all api servers and internally.\nThis performs no changes to the organization or its service implementations.\nRequires organization admin level access.\n",
        "operationId": "getStats",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationStatisticsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/info": {
      "get": {
        "tags": [
          "info-api"
        ],
        "summary": "Returns information about the current environment",
        "operationId": "getEnvironmentInformation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/audit": {
      "get": {
        "tags": [
          "audit-api"
        ],
        "summary": "Retrieve audit logs. Optionally you can limit the returned audit logs by time and type.\nAdmin users can optionally retrieve all audit logs,\nincluding from organizations they do not belong to, without time restrictions.",
        "operationId": "getAuditLog",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Audit logs after this moment in time (exclusive). If both after and before values are not given,\ndefault to 30 days, the maximum allowed range.\n",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Audit logs before this moment in time (exclusive)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Limit audit logs to these types",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "organization.create",
                  "organization.delete",
                  "security.login",
                  "security.logout",
                  "security.register",
                  "user.create",
                  "user.delete",
                  "user.invite",
                  "user.invite.accept",
                  "user.invite.decline",
                  "user.invite.revoke",
                  "user.admin.set",
                  "user.admin.unset",
                  "permissions.change",
                  "organization.token.create",
                  "organization.token.rotate",
                  "organization.token.delete",
                  "security.verify.email",
                  "service.token.create",
                  "service.token.rotate",
                  "service.token.delete",
                  "security.login.mfa",
                  "security.login.oidc",
                  "security.mfa.create",
                  "security.mfa.delete",
                  "security.password.update",
                  "service.create",
                  "service.delete"
                ]
              }
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Id of the single organization where to get the audit logs from. Required for all non-Authlete admin users.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/audit/types": {
      "get": {
        "tags": [
          "audit-api"
        ],
        "summary": "Get available audit event types.",
        "operationId": "getAuditEventTypes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "organization.create",
                      "organization.delete",
                      "security.login",
                      "security.logout",
                      "security.register",
                      "user.create",
                      "user.delete",
                      "user.invite",
                      "user.invite.accept",
                      "user.invite.decline",
                      "user.invite.revoke",
                      "user.admin.set",
                      "user.admin.unset",
                      "permissions.change",
                      "organization.token.create",
                      "organization.token.rotate",
                      "organization.token.delete",
                      "security.verify.email",
                      "service.token.create",
                      "service.token.rotate",
                      "service.token.delete",
                      "security.login.mfa",
                      "security.login.oidc",
                      "security.mfa.create",
                      "security.mfa.delete",
                      "security.password.update",
                      "service.create",
                      "service.delete"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/accessmap": {
      "get": {
        "tags": [
          "access-map-api"
        ],
        "summary": "Retrieve a pre-calculated view of access rights for the console's view.",
        "operationId": "getAccessMap",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserServiceMembershipResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/access/invite/sent": {
      "get": {
        "tags": [
          "access-api"
        ],
        "summary": " Retrieve a list of invitations sent by you.",
        "operationId": "getSentInvitations",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitationResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/access/invite/received": {
      "get": {
        "tags": [
          "access-api"
        ],
        "summary": " Retrieve a list of invitations sent to you.",
        "operationId": "getReceivedInvitations",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitationResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "tags": [
          "discovery-endpoint"
        ],
        "operationId": "getConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session/logout": {
      "delete": {
        "tags": [
          "session-api"
        ],
        "summary": "Logout the current user.",
        "operationId": "logOut",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/email/provider/smtp/cache": {
      "delete": {
        "tags": [
          "smtp-config-api"
        ],
        "summary": "Evict SMTP configuration cache",
        "description": "Clears the cached SMTP config so subsequent calls fetch fresh data.",
        "operationId": "evictCache",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/access/invite/revoke/{id}": {
      "delete": {
        "tags": [
          "access-api"
        ],
        "summary": "Revoke an invitation you have sent. Admins can revoke all invitations.\n",
        "operationId": "revokeInvitation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MultiValueMapStringString": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "writeOnly": true
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "MfaRequest": {
        "required": [
          "mfaToken"
        ],
        "type": "object",
        "properties": {
          "totp": {
            "type": "integer",
            "format": "int32"
          },
          "webauthn": {
            "$ref": "#/components/schemas/WebAuthnChallengeRequest"
          },
          "mfaToken": {
            "type": "string"
          }
        }
      },
      "WebAuthnChallengeRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "attestationObject": {
            "type": "string"
          },
          "clientData": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "authenticatorData": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Challenge": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "LogInResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "lastAuthTime": {
            "type": "string",
            "format": "date-time"
          },
          "authnMethods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "webauthn": {
            "$ref": "#/components/schemas/WebAuthnChallengeResponse"
          },
          "admin": {
            "type": "boolean"
          },
          "autoRegister": {
            "type": "boolean"
          },
          "preferred2faMethod": {
            "type": "string",
            "enum": [
              "totp",
              "webauthn",
              "scratch"
            ]
          },
          "used2faMethod": {
            "type": "string",
            "enum": [
              "totp",
              "webauthn",
              "scratch"
            ]
          },
          "mfaToken": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "oidc": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OIDCFederationStart"
            }
          }
        }
      },
      "OIDCFederationStart": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "WebAuthnChallengeResponse": {
        "type": "object",
        "properties": {
          "challenge": {
            "$ref": "#/components/schemas/Challenge"
          },
          "authenticators": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LogInRequest": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "totp": {
            "type": "integer",
            "format": "int32"
          },
          "webauthn": {
            "$ref": "#/components/schemas/WebAuthnChallengeRequest"
          }
        }
      },
      "CreateUserRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "givenName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "familyName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "companyName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "marketingOptIn": {
            "type": "boolean"
          }
        }
      },
      "CreateUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "lastAuthTime": {
            "type": "string",
            "format": "date-time"
          },
          "hasPendingInvitations": {
            "type": "boolean"
          }
        }
      },
      "UpdateUserRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "givenName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "familyName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "preferred2faMethod": {
            "type": "string",
            "enum": [
              "totp",
              "webauthn",
              "scratch"
            ]
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "admin": {
            "type": "boolean"
          },
          "preferred2faMethod": {
            "type": "string",
            "enum": [
              "totp",
              "webauthn",
              "scratch"
            ]
          }
        }
      },
      "AuthenticationMethodResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "password",
              "totp",
              "webauthn",
              "oidc",
              "scratch",
              "email_verification",
              "password_reset_token",
              "mfa_token"
            ]
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BindTotpCredentialsRequest": {
        "required": [
          "totp"
        ],
        "type": "object",
        "properties": {
          "totp": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "addScratchCodes": {
            "type": "boolean"
          }
        }
      },
      "UpdatePasswordRequest": {
        "required": [
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "RenameAuthenticatorRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "VerifyEmailRequest": {
        "type": "object",
        "properties": {
          "shortVerificationCode": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string"
          },
          "longVerificationCode": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "EmailVerificationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          },
          "needSignup": {
            "type": "boolean"
          }
        }
      },
      "RegisterRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "emailLanguage": {
            "type": "string"
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "ResetPasswordRequest": {
        "required": [
          "newPassword",
          "resetToken"
        ],
        "type": "object",
        "properties": {
          "resetToken": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "PasswordResetTokenCheckResponse": {
        "required": [
          "isValid"
        ],
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RequestPasswordResetEmailRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "emailLanguage": {
            "type": "string"
          }
        }
      },
      "PasswordResetTokenCheckRequest": {
        "required": [
          "resetToken"
        ],
        "type": "object",
        "properties": {
          "resetToken": {
            "type": "string"
          }
        }
      },
      "PasswordCheckRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "PasswordCheckResponse": {
        "type": "object",
        "properties": {
          "isCommon": {
            "type": "boolean"
          }
        }
      },
      "RenameServiceTokenRequest": {
        "required": [
          "apiServerId",
          "description",
          "organizationId",
          "serviceId",
          "tokenId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "ServiceTokenResponse": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "accessToken": {
            "type": "string"
          },
          "tokenId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RotateServiceTokenRequest": {
        "required": [
          "apiServerId",
          "organizationId",
          "serviceId",
          "tokenId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string"
          }
        }
      },
      "DeleteServiceTokenRequest": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CreateServiceTokenRequest": {
        "required": [
          "apiServerId",
          "description",
          "organizationId",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "GetServiceTokensRequest": {
        "required": [
          "apiServerId",
          "organizationId",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateServiceRequest": {
        "required": [
          "apiServerId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "service": {
            "$ref": "#/components/schemas/Service"
          }
        }
      },
      "CredentialIssuerMetadata": {
        "type": "object",
        "properties": {
          "credentialIssuer": {
            "type": "string",
            "format": "uri"
          },
          "authorizationServers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "credentialEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "batchCredentialEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "deferredCredentialEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "credentialResponseEncryptionAlgValuesSupported": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RSA1_5",
                "RSA-OAEP",
                "RSA-OAEP-256",
                "A128KW",
                "A192KW",
                "A256KW",
                "dir",
                "ECDH-ES",
                "ECDH-ES+A128KW",
                "ECDH-ES+A192KW",
                "ECDH-ES+A256KW",
                "A128GCMKW",
                "A192GCMKW",
                "A256GCMKW",
                "PBES2-HS256+A128KW",
                "PBES2-HS384+A192KW",
                "PBES2-HS512+A256KW"
              ]
            }
          },
          "credentialResponseEncryptionEncValuesSupported": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "A128CBC-HS256",
                "A192CBC-HS384",
                "A256CBC-HS512",
                "A128GCM",
                "A192GCM",
                "A256GCM"
              ]
            }
          },
          "requireCredentialResponseEncryption": {
            "type": "boolean"
          },
          "credentialsSupported": {
            "type": "string"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "Hsk": {
        "type": "object",
        "properties": {
          "kty": {
            "type": "string"
          },
          "use": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "kid": {
            "type": "string"
          },
          "hsmName": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        }
      },
      "NamedUri": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "Pair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Scope": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "defaultEntry": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedValue"
            }
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "serviceOwnerNumber": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "serviceName": {
            "type": "string"
          },
          "apiKey": {
            "type": "integer",
            "format": "int64"
          },
          "apiSecret": {
            "type": "string",
            "deprecated": true
          },
          "issuer": {
            "type": "string",
            "format": "uri"
          },
          "authorizationEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "tokenEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "revocationEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "supportedRevocationAuthMethods": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "client_secret_basic",
                "client_secret_post",
                "client_secret_jwt",
                "private_key_jwt",
                "tls_client_auth",
                "self_signed_tls_client_auth",
                "attest_jwt_client_auth"
              ]
            }
          },
          "userInfoEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "jwksUri": {
            "type": "string",
            "format": "uri"
          },
          "jwks": {
            "type": "string"
          },
          "registrationEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "registrationManagementEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "supportedScopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scope"
            }
          },
          "supportedResponseTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "code",
                "token",
                "id_token",
                "code token",
                "code id_token",
                "id_token token",
                "code id_token token"
              ]
            }
          },
          "supportedGrantTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "implicit",
                "password",
                "client_credentials",
                "refresh_token",
                "urn:openid:params:grant-type:ciba",
                "urn:ietf:params:oauth:grant-type:device_code",
                "urn:ietf:params:oauth:grant-type:token-exchange",
                "urn:ietf:params:oauth:grant-type:jwt-bearer",
                "urn:ietf:params:oauth:grant-type:pre-authorized_code"
              ]
            }
          },
          "supportedAcrs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedTokenAuthMethods": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "client_secret_basic",
                "client_secret_post",
                "client_secret_jwt",
                "private_key_jwt",
                "tls_client_auth",
                "self_signed_tls_client_auth",
                "attest_jwt_client_auth"
              ]
            }
          },
          "supportedDisplays": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "page",
                "popup",
                "touch",
                "wap"
              ]
            }
          },
          "supportedClaimTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "normal",
                "aggregated",
                "distributed"
              ]
            }
          },
          "supportedClaims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "serviceDocumentation": {
            "type": "string",
            "format": "uri"
          },
          "supportedClaimLocales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedUiLocales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyUri": {
            "type": "string",
            "format": "uri"
          },
          "tosUri": {
            "type": "string",
            "format": "uri"
          },
          "authenticationCallbackEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "authenticationCallbackApiKey": {
            "type": "string"
          },
          "authenticationCallbackApiSecret": {
            "type": "string"
          },
          "supportedSnses": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "facebook"
              ]
            }
          },
          "snsCredentials": {
            "type": "array",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/SnsCredentials"
            }
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "modifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "developerAuthenticationCallbackEndpoint": {
            "type": "string",
            "format": "uri",
            "deprecated": true
          },
          "developerAuthenticationCallbackApiKey": {
            "type": "string",
            "deprecated": true
          },
          "developerAuthenticationCallbackApiSecret": {
            "type": "string",
            "deprecated": true
          },
          "supportedDeveloperSnses": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "facebook"
              ]
            }
          },
          "developerSnsCredentials": {
            "type": "array",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/SnsCredentials"
            }
          },
          "clientsPerDeveloper": {
            "type": "integer",
            "format": "int32"
          },
          "directAuthorizationEndpointEnabled": {
            "type": "boolean"
          },
          "directTokenEndpointEnabled": {
            "type": "boolean"
          },
          "directRevocationEndpointEnabled": {
            "type": "boolean"
          },
          "directUserInfoEndpointEnabled": {
            "type": "boolean"
          },
          "directJwksEndpointEnabled": {
            "type": "boolean"
          },
          "directIntrospectionEndpointEnabled": {
            "type": "boolean"
          },
          "singleAccessTokenPerSubject": {
            "type": "boolean"
          },
          "pkceRequired": {
            "type": "boolean"
          },
          "pkceS256Required": {
            "type": "boolean"
          },
          "refreshTokenKept": {
            "type": "boolean"
          },
          "refreshTokenDurationKept": {
            "type": "boolean"
          },
          "refreshTokenDurationReset": {
            "type": "boolean"
          },
          "errorDescriptionOmitted": {
            "type": "boolean"
          },
          "errorUriOmitted": {
            "type": "boolean"
          },
          "clientIdAliasEnabled": {
            "type": "boolean"
          },
          "supportedServiceProfiles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "fapi",
                "openbanking"
              ]
            }
          },
          "tlsClientCertificateBoundAccessTokens": {
            "type": "boolean"
          },
          "introspectionEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "supportedIntrospectionAuthMethods": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "client_secret_basic",
                "client_secret_post",
                "client_secret_jwt",
                "private_key_jwt",
                "tls_client_auth",
                "self_signed_tls_client_auth",
                "attest_jwt_client_auth"
              ]
            }
          },
          "mutualTlsValidatePkiCertChain": {
            "type": "boolean"
          },
          "trustedRootCertificates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dynamicRegistrationSupported": {
            "type": "boolean"
          },
          "endSessionEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string"
          },
          "accessTokenType": {
            "type": "string"
          },
          "accessTokenSignAlg": {
            "type": "string",
            "enum": [
              "none",
              "HS256",
              "HS384",
              "HS512",
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES384",
              "ES512",
              "PS256",
              "PS384",
              "PS512",
              "ES256K",
              "EdDSA"
            ]
          },
          "accessTokenDuration": {
            "type": "integer",
            "format": "int64"
          },
          "refreshTokenDuration": {
            "type": "integer",
            "format": "int64"
          },
          "idTokenDuration": {
            "type": "integer",
            "format": "int64"
          },
          "authorizationResponseDuration": {
            "type": "integer",
            "format": "int64"
          },
          "pushedAuthReqDuration": {
            "type": "integer",
            "format": "int64"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          },
          "accessTokenSignatureKeyId": {
            "type": "string"
          },
          "authorizationSignatureKeyId": {
            "type": "string"
          },
          "idTokenSignatureKeyId": {
            "type": "string"
          },
          "userInfoSignatureKeyId": {
            "type": "string"
          },
          "supportedBackchannelTokenDeliveryModes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "poll",
                "ping",
                "push"
              ]
            }
          },
          "backchannelAuthenticationEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "backchannelUserCodeParameterSupported": {
            "type": "boolean"
          },
          "backchannelAuthReqIdDuration": {
            "type": "integer",
            "format": "int32"
          },
          "backchannelPollingInterval": {
            "type": "integer",
            "format": "int32"
          },
          "backchannelBindingMessageRequiredInFapi": {
            "type": "boolean"
          },
          "allowableClockSkew": {
            "type": "integer",
            "format": "int32"
          },
          "deviceAuthorizationEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "deviceVerificationUri": {
            "type": "string",
            "format": "uri"
          },
          "deviceVerificationUriComplete": {
            "type": "string",
            "format": "uri"
          },
          "deviceFlowCodeDuration": {
            "type": "integer",
            "format": "int32"
          },
          "deviceFlowPollingInterval": {
            "type": "integer",
            "format": "int32"
          },
          "userCodeCharset": {
            "type": "string",
            "enum": [
              "BASE20",
              "NUMERIC"
            ]
          },
          "userCodeLength": {
            "type": "integer",
            "format": "int32"
          },
          "pushedAuthReqEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "mtlsEndpointAliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedUri"
            }
          },
          "supportedAuthorizationDetailsTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedTrustFrameworks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedEvidence": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedIdentityDocuments": {
            "type": "array",
            "deprecated": true,
            "items": {
              "type": "string",
              "deprecated": true
            }
          },
          "supportedDocuments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedVerificationMethods": {
            "type": "array",
            "deprecated": true,
            "items": {
              "type": "string",
              "deprecated": true
            }
          },
          "supportedDocumentsMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedDocumentsValidationMethods": {
            "type": "array",
            "deprecated": true,
            "items": {
              "type": "string",
              "deprecated": true
            }
          },
          "supportedDocumentsVerificationMethods": {
            "type": "array",
            "deprecated": true,
            "items": {
              "type": "string",
              "deprecated": true
            }
          },
          "supportedDocumentsCheckMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedElectronicRecords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedVerifiedClaims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supportedAttachments": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "embedded",
                "external"
              ]
            }
          },
          "supportedDigestAlgorithms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "missingClientIdAllowed": {
            "type": "boolean"
          },
          "parRequired": {
            "type": "boolean"
          },
          "requestObjectRequired": {
            "type": "boolean"
          },
          "traditionalRequestObjectProcessingApplied": {
            "type": "boolean"
          },
          "claimShortcutRestrictive": {
            "type": "boolean"
          },
          "scopeRequired": {
            "type": "boolean"
          },
          "nbfOptional": {
            "type": "boolean"
          },
          "issSuppressed": {
            "type": "boolean"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          },
          "supportedCustomClientMetadata": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tokenExpirationLinked": {
            "type": "boolean"
          },
          "frontChannelRequestObjectEncryptionRequired": {
            "type": "boolean"
          },
          "requestObjectEncryptionAlgMatchRequired": {
            "type": "boolean"
          },
          "requestObjectEncryptionEncMatchRequired": {
            "type": "boolean"
          },
          "hsmEnabled": {
            "type": "boolean"
          },
          "hsks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hsk"
            }
          },
          "grantManagementEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "grantManagementActionRequired": {
            "type": "boolean"
          },
          "unauthorizedOnClientConfigSupported": {
            "type": "boolean"
          },
          "dcrScopeUsedAsRequestable": {
            "type": "boolean"
          },
          "predefinedTransformedClaims": {
            "type": "string"
          },
          "loopbackRedirectionUriVariable": {
            "type": "boolean"
          },
          "requestObjectAudienceChecked": {
            "type": "boolean"
          },
          "accessTokenForExternalAttachmentEmbedded": {
            "type": "boolean"
          },
          "refreshTokenIdempotent": {
            "type": "boolean"
          },
          "federationEnabled": {
            "type": "boolean"
          },
          "organizationName": {
            "type": "string"
          },
          "authorityHints": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "trustAnchors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustAnchor"
            }
          },
          "federationJwks": {
            "type": "string"
          },
          "federationSignatureKeyId": {
            "type": "string"
          },
          "federationConfigurationDuration": {
            "type": "integer",
            "format": "int64"
          },
          "signedJwksUri": {
            "type": "string",
            "format": "uri"
          },
          "federationRegistrationEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "supportedClientRegistrationTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "automatic",
                "explicit"
              ]
            }
          },
          "tokenExchangeByIdentifiableClientsOnly": {
            "type": "boolean"
          },
          "tokenExchangeByConfidentialClientsOnly": {
            "type": "boolean"
          },
          "tokenExchangeByPermittedClientsOnly": {
            "type": "boolean"
          },
          "tokenExchangeEncryptedJwtRejected": {
            "type": "boolean"
          },
          "tokenExchangeUnsignedJwtRejected": {
            "type": "boolean"
          },
          "jwtGrantByIdentifiableClientsOnly": {
            "type": "boolean"
          },
          "jwtGrantEncryptedJwtRejected": {
            "type": "boolean"
          },
          "jwtGrantUnsignedJwtRejected": {
            "type": "boolean"
          },
          "dcrDuplicateSoftwareIdBlocked": {
            "type": "boolean"
          },
          "resourceSignatureKeyId": {
            "type": "string"
          },
          "rsResponseSigned": {
            "type": "boolean"
          },
          "openidDroppedOnRefreshWithoutOfflineAccess": {
            "type": "boolean"
          },
          "verifiableCredentialsEnabled": {
            "type": "boolean"
          },
          "credentialIssuerMetadata": {
            "$ref": "#/components/schemas/CredentialIssuerMetadata"
          },
          "credentialOfferDuration": {
            "type": "integer",
            "format": "int64"
          },
          "userPinLength": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "idTokenAudType": {
            "type": "string"
          },
          "supportedPromptValues": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "login",
                "consent",
                "select_account",
                "create"
              ]
            }
          },
          "verifiedClaimsValidationSchemaSet": {
            "type": "string"
          },
          "preAuthorizedGrantAnonymousAccessSupported": {
            "type": "boolean"
          },
          "cnonceDuration": {
            "type": "integer",
            "format": "int64"
          },
          "credentialTransactionDuration": {
            "type": "integer",
            "format": "int64"
          },
          "credentialDuration": {
            "type": "integer",
            "format": "int64"
          },
          "credentialJwks": {
            "type": "string"
          },
          "credentialJwksUri": {
            "type": "string",
            "format": "uri"
          },
          "idTokenReissuable": {
            "type": "boolean"
          },
          "introspectionSignatureKeyId": {
            "type": "string"
          },
          "fapiModes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "fapi1_baseline",
                "fapi1_advanced",
                "fapi2_security",
                "fapi2_message_signing_auth_req",
                "fapi2_message_signing_auth_res",
                "fapi2_message_signing_introspection_res",
                "fapi2_message_signing_resource_req",
                "fapi2_message_signing_resource_res"
              ]
            }
          },
          "dpopNonceRequired": {
            "type": "boolean"
          },
          "dpopNonceDuration": {
            "type": "integer",
            "format": "int64"
          },
          "tokenBatchNotificationEndpoint": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "SnsCredentials": {
        "type": "object",
        "properties": {
          "sns": {
            "type": "string",
            "enum": [
              "facebook"
            ]
          },
          "apiKey": {
            "type": "string"
          },
          "apiSecret": {
            "type": "string"
          }
        }
      },
      "TaggedValue": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "TrustAnchor": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "format": "uri"
          },
          "jwks": {
            "type": "string"
          }
        }
      },
      "DeleteServiceRequest": {
        "required": [
          "apiServerId",
          "organizationId",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RemoveOrphanRequest": {
        "required": [
          "apiServerId",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetServicesOrganizationIdsRequest": {
        "required": [
          "serviceIds"
        ],
        "type": "object",
        "properties": {
          "serviceIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "GetServicesOrganizationIdsResponse": {
        "required": [
          "serviceIdOrganizationIdMap"
        ],
        "type": "object",
        "properties": {
          "serviceIdOrganizationIdMap": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "MoveServiceRequest": {
        "required": [
          "apiServerId",
          "newOrganizationId",
          "organizationId",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "newOrganizationId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ServiceInstanceManagementResponse": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AdoptServiceRequest": {
        "required": [
          "apiServerId",
          "organizationId",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RenameOrganizationTokenRequest": {
        "required": [
          "description",
          "organizationId",
          "tokenId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "OrganizationTokenResponse": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "accessToken": {
            "type": "string"
          },
          "tokenId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RotateOrganizationTokenRequest": {
        "required": [
          "organizationId",
          "tokenId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string"
          }
        }
      },
      "DeleteOrganizationTokenRequest": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CreateOrganizationTokenRequest": {
        "required": [
          "description",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "GetOrganizationTokensRequest": {
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateOrganizationRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "plan": {
            "type": "string",
            "enum": [
              "FREE",
              "BUSINESS",
              "BUSINESSPLUS",
              "ENTERPRISE"
            ]
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "ApiServerAccessResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "allServicePrivileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "allClientPrivileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          },
          "apiServer": {
            "$ref": "#/components/schemas/AuthleteApiServerResponse"
          },
          "serviceAccess": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAccessResponse"
            }
          }
        }
      },
      "AuthleteApiServerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ownedBy": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientAccessResponse": {
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          }
        }
      },
      "OrganizationAccessResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/LogInResponse"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MANAGE_USERS",
                "ADMIN"
              ]
            }
          },
          "allApiServerPrivileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "allServicePrivileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "allClientPrivileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          },
          "apiServerAccess": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiServerAccessResponse"
            }
          }
        }
      },
      "OrganizationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "plan": {
            "type": "string",
            "enum": [
              "FREE",
              "BUSINESS",
              "BUSINESSPLUS",
              "ENTERPRISE"
            ]
          },
          "members": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationAccessResponse"
            }
          }
        }
      },
      "ServiceAccessResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "allClientPrivileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          },
          "privileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "clientAccess": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientAccessResponse"
            }
          }
        }
      },
      "UpdateOrganizationRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "plan": {
            "type": "string",
            "enum": [
              "FREE",
              "BUSINESS",
              "BUSINESSPLUS",
              "ENTERPRISE"
            ]
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "CreateOIDCFederationConfigurationRequest": {
        "required": [
          "clientId",
          "issuer"
        ],
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "usePKCE": {
            "type": "boolean"
          },
          "emailsEnabled": {
            "type": "boolean"
          },
          "allowedAccountCreationDomains": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OIDCFederationConfigurationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "issuer": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "usePKCE": {
            "type": "boolean"
          },
          "emailsEnabled": {
            "type": "boolean"
          },
          "allowedAccountCreationDomains": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateOIDCFederationConfigurationRequest": {
        "required": [
          "clientId",
          "issuer"
        ],
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "usePKCE": {
            "type": "boolean"
          },
          "updateSecret": {
            "type": "boolean"
          },
          "emailsEnabled": {
            "type": "boolean"
          },
          "allowedAccountCreationDomains": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OIDCFederationStartRequest": {
        "required": [
          "issuer"
        ],
        "type": "object",
        "properties": {
          "targetUserEmail": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          }
        }
      },
      "OIDCFederationStartResponse": {
        "required": [
          "redirectTo"
        ],
        "type": "object",
        "properties": {
          "redirectTo": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "ConsentApprovalRequest": {
        "required": [
          "email",
          "marketingOptIn",
          "privacyPolicyAgree"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "companyName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "marketingOptIn": {
            "type": "boolean"
          },
          "privacyPolicyAgree": {
            "type": "boolean"
          }
        }
      },
      "OIDCCallbackRequest": {
        "required": [
          "parameters"
        ],
        "type": "object",
        "properties": {
          "parameters": {
            "type": "string"
          }
        }
      },
      "PostFeedbackRequest": {
        "required": [
          "feedback"
        ],
        "type": "object",
        "properties": {
          "feedback": {
            "maxLength": 4000,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "SmtpConfigRequest": {
        "required": [
          "host",
          "password",
          "port",
          "username"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "host": {
            "pattern": "^[a-zA-Z0-9._-]+$",
            "type": "string"
          },
          "port": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "defaultFromAddress": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "SmtpConfigResponse": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          },
          "defaultFromAddress": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "DynamicConfigRequestResponse": {
        "required": [
          "passwordRegistrationEnabled"
        ],
        "type": "object",
        "properties": {
          "passwordRegistrationEnabled": {
            "type": "boolean"
          }
        }
      },
      "ApprovalRequest": {
        "required": [
          "approved",
          "ticket"
        ],
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "ticket": {
            "type": "string"
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AuthorizationResponse": {
        "type": "object",
        "properties": {
          "resultCode": {
            "type": "string"
          },
          "resultMessage": {
            "type": "string"
          },
          "action": {
            "type": "string",
            "enum": [
              "INTERNAL_SERVER_ERROR",
              "BAD_REQUEST",
              "LOCATION",
              "FORM",
              "NO_INTERACTION",
              "INTERACTION"
            ]
          },
          "service": {
            "$ref": "#/components/schemas/Service"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "display": {
            "type": "string",
            "enum": [
              "page",
              "popup",
              "touch",
              "wap"
            ]
          },
          "maxAge": {
            "type": "integer",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scope"
            }
          },
          "dynamicScopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DynamicScope"
            }
          },
          "uiLocales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "claimsLocales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "claimsAtUserInfo": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "acrEssential": {
            "type": "boolean"
          },
          "clientIdAliasUsed": {
            "type": "boolean"
          },
          "clientEntityIdUsed": {
            "type": "boolean"
          },
          "acrs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "type": "string"
          },
          "loginHint": {
            "type": "string"
          },
          "lowestPrompt": {
            "type": "string",
            "deprecated": true,
            "enum": [
              "none",
              "login",
              "consent",
              "select_account",
              "create"
            ]
          },
          "prompts": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "login",
                "consent",
                "select_account",
                "create"
              ]
            }
          },
          "requestObjectPayload": {
            "type": "string"
          },
          "idTokenClaims": {
            "type": "string"
          },
          "userInfoClaims": {
            "type": "string"
          },
          "transformedClaims": {
            "type": "string"
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "authorizationDetails": {
            "$ref": "#/components/schemas/AuthzDetails"
          },
          "purpose": {
            "type": "string"
          },
          "gmAction": {
            "type": "string",
            "enum": [
              "create",
              "query",
              "replace",
              "revoke",
              "merge"
            ]
          },
          "grantId": {
            "type": "string"
          },
          "grantSubject": {
            "type": "string"
          },
          "grant": {
            "$ref": "#/components/schemas/Grant"
          },
          "requestedClaimsForTx": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requestedVerifiedClaimsForTx": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringArray"
            }
          },
          "credentialOfferInfo": {
            "$ref": "#/components/schemas/CredentialOfferInfo"
          },
          "issuableCredentials": {
            "type": "string"
          },
          "responseContent": {
            "type": "string"
          },
          "ticket": {
            "type": "string"
          }
        }
      },
      "AuthorizeResponse": {
        "type": "object",
        "properties": {
          "redirectTo": {
            "type": "string"
          },
          "pendingAuthorization": {
            "$ref": "#/components/schemas/AuthorizationResponse"
          }
        }
      },
      "AuthzDetails": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthzDetailsElement"
            }
          }
        }
      },
      "AuthzDetailsElement": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dataTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "identifier": {
            "type": "string"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "otherFields": {
            "type": "string"
          },
          "otherFieldsFromMap": {
            "$ref": "#/components/schemas/AuthzDetailsElement"
          },
          "otherFieldsAsMap": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Client": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "serviceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "developer": {
            "type": "string",
            "deprecated": true
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientIdAlias": {
            "type": "string"
          },
          "clientIdAliasEnabled": {
            "type": "boolean"
          },
          "clientSecret": {
            "type": "string"
          },
          "clientType": {
            "type": "string",
            "enum": [
              "public",
              "confidential"
            ]
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "responseTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "code",
                "token",
                "id_token",
                "code token",
                "code id_token",
                "id_token token",
                "code id_token token"
              ]
            }
          },
          "grantTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "implicit",
                "password",
                "client_credentials",
                "refresh_token",
                "urn:openid:params:grant-type:ciba",
                "urn:ietf:params:oauth:grant-type:device_code",
                "urn:ietf:params:oauth:grant-type:token-exchange",
                "urn:ietf:params:oauth:grant-type:jwt-bearer",
                "urn:ietf:params:oauth:grant-type:pre-authorized_code"
              ]
            }
          },
          "applicationType": {
            "type": "string",
            "enum": [
              "web",
              "native"
            ]
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientName": {
            "type": "string"
          },
          "clientNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedValue"
            }
          },
          "logoUri": {
            "type": "string",
            "format": "uri"
          },
          "logoUris": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedValue"
            }
          },
          "clientUri": {
            "type": "string",
            "format": "uri"
          },
          "clientUris": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedValue"
            }
          },
          "policyUri": {
            "type": "string",
            "format": "uri"
          },
          "policyUris": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedValue"
            }
          },
          "tosUri": {
            "type": "string",
            "format": "uri"
          },
          "tosUris": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedValue"
            }
          },
          "jwksUri": {
            "type": "string",
            "format": "uri"
          },
          "jwks": {
            "type": "string"
          },
          "derivedSectorIdentifier": {
            "type": "string"
          },
          "sectorIdentifierUri": {
            "type": "string",
            "format": "uri"
          },
          "subjectType": {
            "type": "string",
            "enum": [
              "public",
              "pairwise"
            ]
          },
          "idTokenSignAlg": {
            "type": "string",
            "enum": [
              "none",
              "HS256",
              "HS384",
              "HS512",
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES384",
              "ES512",
              "PS256",
              "PS384",
              "PS512",
              "ES256K",
              "EdDSA"
            ]
          },
          "idTokenEncryptionAlg": {
            "type": "string",
            "enum": [
              "RSA1_5",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A192KW",
              "A256KW",
              "dir",
              "ECDH-ES",
              "ECDH-ES+A128KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A256KW",
              "A128GCMKW",
              "A192GCMKW",
              "A256GCMKW",
              "PBES2-HS256+A128KW",
              "PBES2-HS384+A192KW",
              "PBES2-HS512+A256KW"
            ]
          },
          "idTokenEncryptionEnc": {
            "type": "string",
            "enum": [
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512",
              "A128GCM",
              "A192GCM",
              "A256GCM"
            ]
          },
          "userInfoSignAlg": {
            "type": "string",
            "enum": [
              "none",
              "HS256",
              "HS384",
              "HS512",
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES384",
              "ES512",
              "PS256",
              "PS384",
              "PS512",
              "ES256K",
              "EdDSA"
            ]
          },
          "userInfoEncryptionAlg": {
            "type": "string",
            "enum": [
              "RSA1_5",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A192KW",
              "A256KW",
              "dir",
              "ECDH-ES",
              "ECDH-ES+A128KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A256KW",
              "A128GCMKW",
              "A192GCMKW",
              "A256GCMKW",
              "PBES2-HS256+A128KW",
              "PBES2-HS384+A192KW",
              "PBES2-HS512+A256KW"
            ]
          },
          "userInfoEncryptionEnc": {
            "type": "string",
            "enum": [
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512",
              "A128GCM",
              "A192GCM",
              "A256GCM"
            ]
          },
          "requestSignAlg": {
            "type": "string",
            "enum": [
              "none",
              "HS256",
              "HS384",
              "HS512",
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES384",
              "ES512",
              "PS256",
              "PS384",
              "PS512",
              "ES256K",
              "EdDSA"
            ]
          },
          "requestEncryptionAlg": {
            "type": "string",
            "enum": [
              "RSA1_5",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A192KW",
              "A256KW",
              "dir",
              "ECDH-ES",
              "ECDH-ES+A128KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A256KW",
              "A128GCMKW",
              "A192GCMKW",
              "A256GCMKW",
              "PBES2-HS256+A128KW",
              "PBES2-HS384+A192KW",
              "PBES2-HS512+A256KW"
            ]
          },
          "requestEncryptionEnc": {
            "type": "string",
            "enum": [
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512",
              "A128GCM",
              "A192GCM",
              "A256GCM"
            ]
          },
          "tokenAuthMethod": {
            "type": "string",
            "enum": [
              "none",
              "client_secret_basic",
              "client_secret_post",
              "client_secret_jwt",
              "private_key_jwt",
              "tls_client_auth",
              "self_signed_tls_client_auth",
              "attest_jwt_client_auth"
            ]
          },
          "tokenAuthSignAlg": {
            "type": "string",
            "enum": [
              "none",
              "HS256",
              "HS384",
              "HS512",
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES384",
              "ES512",
              "PS256",
              "PS384",
              "PS512",
              "ES256K",
              "EdDSA"
            ]
          },
          "defaultMaxAge": {
            "type": "integer",
            "format": "int32"
          },
          "defaultAcrs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authTimeRequired": {
            "type": "boolean"
          },
          "loginUri": {
            "type": "string",
            "format": "uri"
          },
          "requestUris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedValue"
            }
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "modifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "extension": {
            "$ref": "#/components/schemas/ClientExtension"
          },
          "tlsClientAuthSubjectDn": {
            "type": "string"
          },
          "tlsClientAuthSanDns": {
            "type": "string"
          },
          "tlsClientAuthSanUri": {
            "type": "string",
            "format": "uri"
          },
          "tlsClientAuthSanIp": {
            "type": "string"
          },
          "tlsClientAuthSanEmail": {
            "type": "string"
          },
          "tlsClientCertificateBoundAccessTokens": {
            "type": "boolean"
          },
          "selfSignedCertificateKeyId": {
            "type": "string"
          },
          "softwareId": {
            "type": "string"
          },
          "softwareVersion": {
            "type": "string"
          },
          "authorizationSignAlg": {
            "type": "string",
            "enum": [
              "none",
              "HS256",
              "HS384",
              "HS512",
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES384",
              "ES512",
              "PS256",
              "PS384",
              "PS512",
              "ES256K",
              "EdDSA"
            ]
          },
          "authorizationEncryptionAlg": {
            "type": "string",
            "enum": [
              "RSA1_5",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A192KW",
              "A256KW",
              "dir",
              "ECDH-ES",
              "ECDH-ES+A128KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A256KW",
              "A128GCMKW",
              "A192GCMKW",
              "A256GCMKW",
              "PBES2-HS256+A128KW",
              "PBES2-HS384+A192KW",
              "PBES2-HS512+A256KW"
            ]
          },
          "authorizationEncryptionEnc": {
            "type": "string",
            "enum": [
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512",
              "A128GCM",
              "A192GCM",
              "A256GCM"
            ]
          },
          "bcDeliveryMode": {
            "type": "string",
            "enum": [
              "poll",
              "ping",
              "push"
            ]
          },
          "bcNotificationEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "bcRequestSignAlg": {
            "type": "string",
            "enum": [
              "none",
              "HS256",
              "HS384",
              "HS512",
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES384",
              "ES512",
              "PS256",
              "PS384",
              "PS512",
              "ES256K",
              "EdDSA"
            ]
          },
          "bcUserCodeRequired": {
            "type": "boolean"
          },
          "dynamicallyRegistered": {
            "type": "boolean"
          },
          "registrationAccessTokenHash": {
            "type": "string"
          },
          "authorizationDetailsTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parRequired": {
            "type": "boolean"
          },
          "requestObjectRequired": {
            "type": "boolean"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          },
          "customMetadata": {
            "type": "string"
          },
          "frontChannelRequestObjectEncryptionRequired": {
            "type": "boolean"
          },
          "requestObjectEncryptionAlgMatchRequired": {
            "type": "boolean"
          },
          "requestObjectEncryptionEncMatchRequired": {
            "type": "boolean"
          },
          "digestAlgorithm": {
            "type": "string"
          },
          "singleAccessTokenPerSubject": {
            "type": "boolean"
          },
          "pkceRequired": {
            "type": "boolean"
          },
          "pkceS256Required": {
            "type": "boolean"
          },
          "rsSignedRequestKeyId": {
            "type": "string"
          },
          "rsRequestSigned": {
            "type": "boolean",
            "deprecated": true
          },
          "dpopRequired": {
            "type": "boolean"
          },
          "locked": {
            "type": "boolean"
          },
          "fapiModes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "fapi1_baseline",
                "fapi1_advanced",
                "fapi2_security",
                "fapi2_message_signing_auth_req",
                "fapi2_message_signing_auth_res",
                "fapi2_message_signing_introspection_res",
                "fapi2_message_signing_resource_req",
                "fapi2_message_signing_resource_res"
              ]
            }
          },
          "responseModes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "query",
                "fragment",
                "form_post",
                "jwt",
                "query.jwt",
                "fragment.jwt",
                "form_post.jwt"
              ]
            }
          },
          "mtlsEndpointAliasesUsed": {
            "type": "boolean"
          },
          "entityId": {
            "type": "string",
            "format": "uri"
          },
          "trustAnchorId": {
            "type": "string",
            "format": "uri"
          },
          "trustChain": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustChainExpiresAt": {
            "type": "integer",
            "format": "int64"
          },
          "trustChainUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "organizationName": {
            "type": "string"
          },
          "signedJwksUri": {
            "type": "string",
            "format": "uri"
          },
          "clientRegistrationTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "automatic",
                "explicit"
              ]
            }
          },
          "automaticallyRegistered": {
            "type": "boolean"
          },
          "explicitlyRegistered": {
            "type": "boolean"
          },
          "credentialOfferEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "credentialResponseEncryptionRequired": {
            "type": "boolean"
          },
          "sectorIdentifier": {
            "type": "string",
            "format": "uri",
            "deprecated": true
          }
        }
      },
      "ClientExtension": {
        "type": "object",
        "properties": {
          "requestableScopesEnabled": {
            "type": "boolean"
          },
          "requestableScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accessTokenDuration": {
            "type": "integer",
            "format": "int64"
          },
          "refreshTokenDuration": {
            "type": "integer",
            "format": "int64"
          },
          "tokenExchangePermitted": {
            "type": "boolean"
          }
        }
      },
      "CredentialOfferInfo": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "credentialOffer": {
            "type": "string"
          },
          "credentialIssuer": {
            "type": "string",
            "format": "uri"
          },
          "credentialConfigurationIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authorizationCodeGrantIncluded": {
            "type": "boolean"
          },
          "issuerStateIncluded": {
            "type": "boolean"
          },
          "issuerState": {
            "type": "string"
          },
          "preAuthorizedCodeGrantIncluded": {
            "type": "boolean"
          },
          "preAuthorizedCode": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "expiresAt": {
            "type": "integer",
            "format": "int64"
          },
          "context": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "jwtAtClaims": {
            "type": "string"
          },
          "authTime": {
            "type": "integer",
            "format": "int64"
          },
          "acr": {
            "type": "string"
          },
          "txCode": {
            "type": "string"
          },
          "txCodeInputMode": {
            "type": "string"
          },
          "txCodeDescription": {
            "type": "string"
          }
        }
      },
      "DynamicScope": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Grant": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantScope"
            }
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authorizationDetails": {
            "$ref": "#/components/schemas/AuthzDetails"
          }
        }
      },
      "GrantScope": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "resource": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Property": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          }
        }
      },
      "StringArray": {
        "type": "object",
        "properties": {
          "array": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AuthorizeRequest": {
        "required": [
          "parameters"
        ],
        "type": "object",
        "properties": {
          "parameters": {
            "type": "string"
          }
        }
      },
      "CreateApiServerRequest": {
        "required": [
          "apiServerUrl",
          "description"
        ],
        "type": "object",
        "properties": {
          "apiServerUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "ownedBy": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateApiServerResponse": {
        "type": "object",
        "properties": {
          "apiServerUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ownedBy": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateApiServerRequest": {
        "required": [
          "apiServerUrl",
          "description"
        ],
        "type": "object",
        "properties": {
          "apiServerUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "ownedBy": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateAuthleteApplicationRequest": {
        "required": [
          "clientId",
          "icon",
          "launchUrl",
          "name",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "launchUrl": {
            "type": "string"
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateAuthleteApplicationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "clientId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "launchUrl": {
            "type": "string"
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateAuthleteApplicationRequest": {
        "required": [
          "clientId",
          "icon",
          "launchUrl",
          "name",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "launchUrl": {
            "type": "string"
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateAuthleteApplicationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "clientId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "launchUrl": {
            "type": "string"
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateServicePrivilegesRequest": {
        "required": [
          "apiServerId",
          "organizationId",
          "serviceId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "allClientPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          }
        }
      },
      "RemoveServicePrivilegesRequest": {
        "required": [
          "apiServerId",
          "organizationId",
          "serviceId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateOrganizationPrivilegesRequest": {
        "required": [
          "organizationId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MANAGE_USERS",
                "ADMIN"
              ]
            }
          },
          "allApiServerPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "allServicePrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "allClientPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          }
        }
      },
      "RemoveOrganizationPrivilegesRequest": {
        "required": [
          "organizationId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateInvitationRequest": {
        "required": [
          "email",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "emailLanguage": {
            "type": "string"
          },
          "organizationPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MANAGE_USERS",
                "ADMIN"
              ]
            }
          },
          "apiServerPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "servicePrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "clientPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          }
        }
      },
      "ApiServerAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "allServicePrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "allClientPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          },
          "serviceAccess": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAccess"
            }
          },
          "organization_access_id": {
            "type": "integer",
            "format": "int64"
          },
          "api_server_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          },
          "service_access_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InvitationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "email": {
            "type": "string"
          },
          "inviter": {
            "$ref": "#/components/schemas/LogInResponse"
          },
          "organizationPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MANAGE_USERS",
                "ADMIN"
              ]
            }
          },
          "apiServerPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "servicePrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "clientPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "xid": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "plan": {
            "type": "string",
            "enum": [
              "FREE",
              "BUSINESS",
              "BUSINESSPLUS",
              "ENTERPRISE"
            ]
          },
          "serviceListing": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceInstance"
            }
          },
          "members": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationAccess"
            }
          }
        }
      },
      "OrganizationAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MANAGE_USERS",
                "ADMIN"
              ]
            }
          },
          "allApiServerPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "allServicePrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "allClientPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          },
          "apiServerAccess": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiServerAccess"
            }
          },
          "organization_id": {
            "type": "integer",
            "format": "int64"
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ServiceAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "allClientPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "clientAccess": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientAccess"
            }
          },
          "api_server_access_id": {
            "type": "integer",
            "format": "int64"
          },
          "service_id": {
            "$ref": "#/components/schemas/ServiceInstance"
          }
        }
      },
      "ServiceInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "organization_id": {
            "type": "integer",
            "format": "int64"
          },
          "api_server_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateClientPrivilegesRequest": {
        "required": [
          "apiServerId",
          "clientId",
          "organizationId",
          "serviceId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          }
        }
      },
      "RemoveClientPrivilegesRequest": {
        "required": [
          "apiServerId",
          "clientId",
          "organizationId",
          "serviceId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateApiServerPrivilegesRequest": {
        "required": [
          "apiServerId",
          "organizationId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "allServicePrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "allClientPrivileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          }
        }
      },
      "RemoveApiServerPrivilegesRequest": {
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GoogleAuthenticatorConfig": {
        "type": "object",
        "properties": {
          "timeStepSizeInMillis": {
            "type": "integer",
            "format": "int64"
          },
          "windowSize": {
            "type": "integer",
            "format": "int32"
          },
          "codeDigits": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfScratchCodes": {
            "type": "integer",
            "format": "int32"
          },
          "keyModulus": {
            "type": "integer",
            "format": "int32"
          },
          "secretBits": {
            "type": "integer",
            "format": "int32"
          },
          "keyRepresentation": {
            "type": "string",
            "enum": [
              "BASE32",
              "BASE64"
            ]
          },
          "hmacHashFunction": {
            "type": "string",
            "enum": [
              "HmacSHA1",
              "HmacSHA256",
              "HmacSHA512"
            ]
          }
        }
      },
      "GoogleAuthenticatorKey": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/GoogleAuthenticatorConfig"
          },
          "key": {
            "type": "string"
          },
          "verificationCode": {
            "type": "integer",
            "format": "int32"
          },
          "scratchCodes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "OrphanService": {
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OrphanServiceResponse": {
        "type": "object",
        "properties": {
          "onApiButNotOnIdp": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrphanService"
            }
          },
          "onIdPButNotOnApi": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrphanService"
            }
          }
        }
      },
      "OrganizationStatisticsResponse": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfUsers": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfServices": {
            "type": "integer",
            "format": "int32"
          },
          "totalNumberOfClients": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfClientsPerService": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceInstanceClientCount"
            }
          }
        }
      },
      "ServiceInstanceClientCount": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfClients": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InfoResponse": {
        "type": "object",
        "properties": {
          "commitId": {
            "type": "string"
          },
          "buildTime": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "passwordRegistrationEnabled": {
            "type": "boolean"
          },
          "socialLoginEnabled": {
            "type": "boolean"
          },
          "emailSendingStrategyType": {
            "type": "string",
            "enum": [
              "NONE",
              "PUB_SUB",
              "SMTP"
            ]
          }
        }
      },
      "AuditLogEntry": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "completed",
              "failed"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "cluster": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "remoteAddr": {
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApiServerMembershipResponse": {
        "type": "object",
        "properties": {
          "apiServerId": {
            "type": "integer",
            "format": "int64"
          },
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "privileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_SERVICE",
                "ADMIN"
              ]
            }
          },
          "services": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceInstanceMembershipResponse"
            }
          }
        }
      },
      "OrganizationMembershipResponse": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "plan": {
            "type": "string",
            "enum": [
              "FREE",
              "BUSINESS",
              "BUSINESSPLUS",
              "ENTERPRISE"
            ]
          },
          "privileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MANAGE_USERS",
                "ADMIN"
              ]
            }
          },
          "apiServers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiServerMembershipResponse"
            }
          },
          "membersCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServiceInstanceMembershipResponse": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "privileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_SERVICE",
                "USE_SERVICE",
                "CREATE_CLIENT",
                "MODIFY_SERVICE"
              ]
            }
          },
          "clients": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientAccessResponse"
            }
          },
          "clientPrivileges": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW_CLIENT",
                "MODIFY_CLIENT"
              ]
            }
          }
        }
      },
      "UserServiceMembershipResponse": {
        "type": "object",
        "properties": {
          "organizations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMembershipResponse"
            }
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "admin": {
            "type": "boolean"
          }
        }
      }
    }
  }
}